library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library("MRAregress")
remove.packages("mraMLR")
man("MRAregress")
?MRAregress
??MRAregress
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
?rCI
library(MRAregress)
?rCI
?DrawHeat
?DrawHeat
library(MRAregress)
?DrawHeat
library(MRAregress)
?MRARegress
?MRARegress
?rCI
?DrawHeat
?DrawGraph
?DrawGraphML
library(MRAregress)
?DrawGraphML
?Classify
library(MRAregress)
?Classify
?MRARegress
?Classify
library(MRAregress)
?Classify
library(MRAregress)
?Classify
?Score
?DrawScore
?RocPR
usethis::use_r("MRARegress")
usee_test()
use_test()
devtools::use_test()
usethis::use_roxygen_md()
usethis::use_r("fix_missing")
library(MRAregress)
usethis::use_r("fix_missing")
usethis::use_roxygen_md()
usethis::use_roxygen_md()
roxygen2md::roxygen2md()
usethis::use_r("MRARegress")
use_test()
usethis::use_test()
usethis::use_roxygen_md()
library(MRAregress)
usethis::use_r("MRARegress")
usethis::use_test()
library(MRAregress)
source("C:/Users/jean-pierre.borg/IRCM/These/Recherche/Packages/MRAregress/R/MRARegress.R")
source("C:/Users/jean-pierre.borg/IRCM/These/Recherche/Packages/MRAregress/R/test-MRARegress.R")
source("C:/Users/jean-pierre.borg/IRCM/These/Recherche/Packages/MRAregress/R/test_MRARegress.R")
usethis::use_r("MRARegress")
usethis::use_r("MRARegress")
usethis::use_test()
usethis::use_roxygen_md()
devtools::test()
covr::package_coverage()
usethis::use_r("fix_missing")
usethis::use_roxygen_md()
usethis::use_test()
usethis::use_roxygen_md()
usethis::use_r("MRARegress")
usethis::use_r("MRARegress")
usethis::use_roxygen_md()
usethis::use_test()
devtools::test()
install.packages("covr")
library('covr')
covr::package_coverage()
covr::package_coverage()
library(MRAregress)
library(MRAregress)
rm(list = ls())		# We have also to restart a new session to unload all the packages.
# We can also detach every package individually by : detach(package:packagename)
Verbose	<- FALSE
#
# 	Declaration of the libraries and of the functions used in this document
#
library ("rootSolve")		# 	To use multiroot
load("C:/Users/jean-pierre.borg/Documents/GitHub/BulkSignalR-master/data/bodyMap.mouse.rda")
bodyMap.mouse
MapExper	<- array(0, dim=c(6,6))
diag(MapExper)	<- 1
usethis::use_data(MapExper)
load("C:/Users/jean-pierre.borg/IRCM/These/Recherche/Packages/MRAregress/data/MapExper.rda")
MapExper
View(MapExper)
M	<- c(131.46478, 46.84160, 55.95284, 103.05500, 139.58334, 28.40970,
131.46141, 46.84368, 55.94982, 103.05826, 139.57978, 28.41158,
131.46137, 46.84549, 55.94720, 103.06109, 139.57669, 28.41321,
131.46543, 46.84104, 55.95083, 103.05622, 139.58201, 28.41040,
131.46638, 46.84020, 55.95091, 103.05804, 139.58003, 28.41145,
131.46539, 46.84107, 55.95584, 103.05178, 139.57787, 28.41037,
131.46560, 46.84088, 55.95690, 103.05064, 139.58585, 28.41060)
MatExp	<- array(M, dim=c(6,7))
usethis::use_data(MatExp)
NodeNames <- c("MKKK", "MKKK-PP", "MKK", "MKK-PP", "MAPK", "MAPK-PP")
usethis::use_data(NodeNames)
?DrawGraph
library("MRARegress")
usethis::use_data_raw()
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
install.packages("pandoc")
library(MRAregress)
library(MRAregress)
vignette()
vignette(MRAregress)
vignette("MRAregress")
library(MRAregress)
vignette("MRAregress")
vignette(MRAregress)
library(MRAregress)
vignette("MRAregress")
library(MRAregress)
vignette("MRAregress")
library("remotes")
library(MRAregress)
usethis::use_r("Classify")
usethis::use_test("Classify")
usethis::use_r("DrawGraph")
usethis::use_test("DrawGraph")
usethis::use_r("DrawGraphML")
usethis::use_test("DrawGraphML")
usethis::use_r("DrawHeat")
usethis::use_test("DrawHeat")
usethis::use_r("DrawScore")
usethis::use_test("DrawScore")
usethis::use_r("rCI")
usethis::use_test("rCI")
usethis::use_r("RocPR")
usethis::use_test("RocPR")
usethis::use_r("Score")
usethis::use_test("Score")
devtools::document()
# Ã©crire les tests
usethis::use_r("DrawGraph")
usethis::use_test("DrawGraph")
library(MRAregress)
devtools::test()
library(MRAregress)
load("C:\\Users\\jean-pierre.borg\\IRCM\\These\\Recherche\\Packages\\MatExp2")
MatExp2
str(MatExp2)
MatExp2[,1]
MatExp2[,2:11]
MatExp2[,2:11]
Solution	<- array(dim=c(10, 10))			# Solution : the true network structure
load("C:\\Users\\jean-pierre.borg\\IRCM\\These\\Recherche\\Packages\\MRAregress\\data-raw\\Reference")
usethis::use_data(Reference)
Reference	<- array(dim=c(10, 10))			# Reference : the true network structure
load("C:\\Users\\jean-pierre.borg\\IRCM\\These\\Recherche\\Packages\\MRAregress\\data-raw\\Reference")
Reference
Reference	<- array(dim=c(10, 10))			# Reference : the true network structure
load("C:\\Users\\jean-pierre.borg\\IRCM\\These\\Recherche\\Packages\\MRAregress\\data-raw\\Reference")
usethis::use_data(Reference)
MatExp2	<- array(dim=c(10, 21))				# MatExp2 : the expresson matrix
load("C:\\Users\\jean-pierre.borg\\IRCM\\These\\Recherche\\Packages\\MRAregress\\data-raw\\MatExp2")
usethis::use_data(MatExp2)
Map1		<- array(0, dim=c(10,10))
diag(Map1)	<- 1
Map2		<- array(0, dim=c(10,10))
diag(Map2)	<- 1
MapExper2	<- cbind(Map1,Map2)
str(Reference)
str(MatExp2)
str(MapExper2)
Reference
Reference	<- array(0, dim=c(10, 10))		# Reference : the true network structure
load("C:\\Users\\jean-pierre.borg\\IRCM\\These\\Recherche\\Packages\\MRAregress\\data-raw\\Reference")
Reference
?load
Reference	<- array(0, dim=c(10, 10))		# Reference : the true network structure
load("C:\\Users\\jean-pierre.borg\\IRCM\\These\\Recherche\\Packages\\MRAregress\\data-raw\\Reference")
Reference	<- load("C:\\Users\\jean-pierre.borg\\IRCM\\These\\Recherche\\Packages\\MRAregress\\data-raw\\Reference")
Reference
str(Reference)
Solution
Solution=NULL
Solution
load("Solution")
load("C:\\Users\\jean-pierre.borg\\IRCM\\These\\Recherche\\Packages\\MRAregress\\data-raw\\Solution")
Solution
rm(list = ls())
Solution
load("C:\\Users\\jean-pierre.borg\\IRCM\\These\\Recherche\\Packages\\MRAregress\\data-raw\\Solution")
usethis::use_data(Solution)
load("C:\\Users\\jean-pierre.borg\\IRCM\\These\\Recherche\\Packages\\MRAregress\\data-raw\\MatExp2")
usethis::use_data(MatExp2)
load("C:\\Users\\jean-pierre.borg\\IRCM\\These\\Recherche\\Packages\\MRAregress\\data-raw\\Solution")
usethis::use_data(Solution)
load("C:\\Users\\jean-pierre.borg\\IRCM\\These\\Recherche\\Packages\\MRAregress\\data-raw\\MatExp2")
usethis::use_data(MatExp2)
Map1		<- array(0, dim=c(10,10))
diag(Map1)	<- 1
Map2		<- array(0, dim=c(10,10))
diag(Map2)	<- 1
MapExper2	<- cbind(Map1,Map2)
MapExper2
usethis::use_data(MapExper2)
?DrawScore
?Classify
?DrawScore
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
install.packages("FactoMineR")
library("FactoMineR")
install.packages(c("Factoshiny","missMDA","FactoInvestigate"))
library("Rcmdr")
install.packages("RcmdrPlugin.FactoMineR")
library("Rcmdr")
library("MRARegress")
library(MRAregress)
library(MRAregress)
library("MRAregress")
devtools::use_vignette("MRARegress_vignette",pkg="MRARegress")
vignette("MRARegress", package="MRARegress")
vignette("MRARegress")
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
rm(list = ls())
uninstall MRAregress
uninstall "MRAregress"
npm uninstall "MRAregress"
remove.packages(pkgs = "MRARegress")
remove.packages("MRARegress")
remove.packages("MRAregress")
devtools::install_github("J-P-Borg/MRARegress")
devtools::install_github("J-P-BORG/MRARegress")
devtools::install_github(J-P-Borg/MRARegress)
devtools::install_github("J-P-Borg"/"MRARegress")
devtools::install_github("J-P-Borg/MRARegress")
library(MRAregress)
devtools::install_github("J-P-Borg/MRARegress")
remove.packages("MRAregress")
devtools::install_github("J-P-Borg/MRARegress")
library("MRARegress")
library(MRARegress)
library("J-P-Borg/MRARegress")
library(MRAregress)
detach("package:MRAregress", unload = TRUE)
library(MRARegress)
library(MRAregress)
library(MRAregress)
library(MRAregress)
detach("package:MRAregress", unload = TRUE)
library(MRAregress)
library(MRAregress)
detach("package:MRAregress", unload = TRUE)
library(MRAregress)
detach("package:MRAregress", unload = TRUE)
remove.packages("MRAregress")
library(MRARegress)
detach("package:MRARegress", unload = TRUE)
remove.packages("MRARegress")
library(MRARegress)
devtools::install_github("J-P-Borg/MRARegress")
library(MRARegress)
library(MRARegress)
?MRARegress
vignette(MRARegress)
vignette("MRARegress", pkg="MRARegress")
vignettes("MRARegress", pkg="MRARegress")
detach("package:MRARegress", unload = TRUE)
remove.packages("MRARegress")
devtools::install_github("J-P-Borg/MRARegress", build_vignettes = TRUE)
library(MRARegress)
?MRARegress
?MRARegress
library(MRARegress)
?MRARegress
?DrawGraph
vignette("MRARegress", pkg="MRARegress")
vignette("MRARegress")
vignette("MRARegress", package = "MRARegress")
devtools::install(build_vignettes = TRUE)
vignette("MRARegress", package = "MRARegress")
vignette("MRARegress", package = "MRARegress")
devtools::install_github(build_vignettes = TRUE)
?install_github
devtools::install_github("J-P-Borg/MRARegress", build_vignettes = TRUE)
detach("package:MRARegress", unload = TRUE)
devtools::install_github("J-P-Borg/MRARegress", build_vignettes = TRUE)
library(MRARegress)
vignette("MRARegress", package = "MRARegress")
vignette("MRARegress")
vignette("MRARegress", package = "MRARegress")
devtools::build()
devtools::install(build_vignettes=TRUE)
vignette("MRARegress", package = "MRARegress")
library(MRARegress)
vignette("MRARegress", package = "MRARegress")
devtools::build()
devtools::install(build_vignettes=TRUE)
devtools::install_github("J-P-Borg/MRARegress",build_vignettes=TRUE)
detach("package:MRARegress", unload = TRUE)
devtools::install_github("J-P-Borg/MRARegress",build_vignettes=TRUE)
vignette("MRARegress", package = "MRARegress")
devtools::install_github(build_vignettes = TRUE)
devtools::install_github("J-P-Borg/MRARegress",build_vignettes=TRUE)
library(MRARegress)
vignette("MRARegress", package = "MRARegress")
devtools::install(build_vignettes = TRUE)
vignette("MRARegress", package = "MRARegress")
remove.packages("MRARegress")
devtools::install_github("J-P-Borg/MRARegress"
)
library(MRARegress)
remove.packages("MRARegress")
remove.packages("devtools")
install.packages("devtools")
devtools::install_github("J-P-Borg/MRARegress")
library("MRARegress")
library(MRARegress)
?MRARegress
src=MRARegress(1,NULL,NULL)
?DrawGraph
DrawGraph()
devtools::install(build_vignettes = TRUE)
vignette("MRARegress", package = "MRARegress")
don = read.table("C:\Users\jean-pierre.borg\IRCM\These\SÃ©minaires et MOOC\MOOC Analyse donnÃ©es/AnaDo_JeuDonnees_FertiliteEurope.csv", header=TRUE, sep=";", check.names=FALSE, fileEncoding="latin1",
don = read.table("C:/Users\jean-pierre.borg\IRCM\These\SÃ©minaires et MOOC\MOOC Analyse donnÃ©es/AnaDo_JeuDonnees_FertiliteEurope.csv", header=TRUE, sep=";", check.names=FALSE, fileEncoding="latin1",
don = read.table("C:/Users/jean-pierre.borg/IRCM/These/SÃ©minaires et MOOC/MOOC Analyse donnÃ©es/AnaDo_JeuDonnees_FertiliteEurope.csv", header=TRUE, sep=";", check.names=FALSE, fileEncoding="latin1",
row.names=1,stringsAsFactors = TRUE)
str(don)
don
for (j in 1:(dim(don)[2])) {
donMean[j]	= mean(don[ ,j])
donSd[j]	= sqrt(var(don[ ,j]))
}
donMean	= vector(length=dim(don)[2])					# Moyenne des donnÃ©es, par colonne
donSd	= vector(length=dim(don)[2])					# Ecart-type des donnÃ©es, par colonne
donCR	= matrix(0, dim=c(dim(don)[1], dim(don)[2]))	# DonnÃ©es centrÃ©es, rÃ©duites
donMean	= vector(length=dim(don)[2])					# Moyenne des donnÃ©es, par colonne
donSd	= vector(length=dim(don)[2])					# Ecart-type des donnÃ©es, par colonne
donCR	= array(0, dim=c(dim(don)[1], dim(don)[2]))		# DonnÃ©es centrÃ©es, rÃ©duites
for (j in 1:(dim(don)[2])) {
donMean[j]	= mean(don[ ,j])
donSd[j]	= sqrt(var(don[ ,j]))
donCR[ ,j]	= (don[ ,j] - donMean[j]) / donSd[j]
}
for (j in 1:(dim(don)[2])) {
donMean[j]	= mean(don[ ,j])
}
donM	= as.matrix(don[ , 1:6])
str(donM)
donMean	= vector(length=dim(donM)[2])					# Moyenne des donnÃ©es, par colonne
donSd	= vector(length=dim(donM)[2])					# Ecart-type des donnÃ©es, par colonne
donCR	= array(0, dim=c(dim(donM)[1], dim(donM)[2]))		# DonnÃ©es centrÃ©es, rÃ©duites
for (j in 1:(dim(don)[2])) {
donMean[j]	= mean(donM[ ,j])
donSd[j]	= sqrt(var(donM[ ,j]))
donCR[ ,j]	= (donM[ ,j] - donMean[j]) / donSd[j]
}
for (j in 1:(dim(donM)[2])) {
donMean[j]	= mean(donM[ ,j])
donSd[j]	= sqrt(var(donM[ ,j]))
donCR[ ,j]	= (donM[ ,j] - donMean[j]) / donSd[j]
}
donCR
donMean	= vector(length=dim(donM)[2])					# Moyenne des donnÃ©es, par colonne
donSd	= vector(length=dim(donM)[2])					# Ecart-type des donnÃ©es, par colonne
donCR	= array(0, dim=c(dim(donM)[1], dim(donM)[2]))	# DonnÃ©es centrÃ©es, rÃ©duites
InerC	= vector(length=dim(donM)[2])					# Inertie, par colonne
for (j in 1:(dim(donM)[2])) {
donMean[j]	= mean(donM[ ,j])
donSd[j]	= sqrt(var(donM[ ,j]))
donCR[ ,j]	= (donM[ ,j] - donMean[j]) / donSd[j]
InerC[j]	= sum(donCR[ ,j]**2)
}
InerTot	= sum(donCR[ , ]**2)
for (j in 1:(dim(donM)[2])) {
cat("Colonne ", j, " %Inertie ", 100*InerC[j]/InerTot, "\n")
}
InerTot
InerC
sum(donCR[1:2,1]**2)
sum(donCR[ ,1]**2)
sum(donCR[1:10,1]**2)
sum(donCR[11:20,1]**2)
sum(donCR[21:30,1]**2)
sum(donCR[31:39,1]**2)
?FactoMineR
library(FactoMineR)
?FactoMineR
?PCA
don.pca(don, quali.sup=7)
don.pca = PCA(don, quali.sup=7)
plot.PCA(don.pca,choix="ind")
pPCA = plot.PCA(don.pca,choix="ind")
pPCA
str(pPCA)
str(don.pca)
library(Factoshiny)
library(Factoshiny)
data(don)
result	<- Factoshiny(don)
don
don
donMean
donSd
don[1,1]
don35P[ ] = don[ ,5] + don[ ,6]
don35P = vector(length=dim(don)[1])
don35P[ ] = don[ ,5] + don[ ,6]
don35P
don[2,]
don[14,]
don[,1]
don[,1:3]
don(dim)[1]
dim(don)[1]
rownames(don)
don[39,]
don[16,]
cov(don[ ,1], don35[ ])
cov(don[ ,1], don35P[ ])
cor(don[ ,1], don35P[ ])
cor(don[ ,1], don[ ,3])
result
don
Factoshiny(result)
result	<- Factoshiny(don)
MRARegress <- function (nbBase, MapExper, MatExp, NodeNames = NULL, KnlgMap = NULL, Method = "TLR") {
cat ("this method is not implemented yet !", "\n")
tryCatch (
expr = {
},		# expr
error = function (e) {
message ("Error detected !")
print(e)
},		# error
warning = function (e) {
message ("Warning detected !")
print(e)
},		# warning
finally = {
}		# finally
)		# tryCatch
}		# MRARegress
MRARegress(1, NULL,NULL)
vec <- c(1:10)
vec
apply(vec, 1, sum)
apply(vec, 2, sum)
dim(vec)
MatExp		<- matrix(c(1,2,3, 11,21,31, 12,22,32, 13,23,33),nrow=3)	# 3 nodes, 3 perturbations, Base : 1st column
MatrCc		<- matrix(0, nrow=3, ncol=3)
MatExp
MatrCc
MatD0		<- MatrCc							# Contains Delta X (for verification)
for (iNode in 1:3) {
MatD0[ ,iNode]	<- MatExp[ ,iNode+1] - MatExp[ ,1]
}
MatD0
